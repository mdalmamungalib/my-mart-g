// This is your Prisma schema file, learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Coupon {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  couponCode String
  expiryDate DateTime
  isActive   Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Banner {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  link      String
  imageUrl  String
  isActive  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String    @unique
  imageUrl    String?
  description String?
  isActive    Boolean

  trainings   Training[]
  products    Product[]

  marketIds   String[]   @db.ObjectId
  markets     Market[]   @relation(fields: [marketIds], references: [id])

  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Market {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String  @unique
  logoUrl     String?
  description String?
  isActive    Boolean

  categoryIds String[]   @db.ObjectId
  categories  Category[] @relation(fields: [categoryIds], references: [id])

  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Product {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  barcode         String
  description     String
  imageUrl        String
  isActive        Boolean
  isMultiple      Boolean
  isWholesale     Boolean
  minimumWholeQty Int
  productCode     String?
  productPrice    Float
  productStock    Int
  qty             Int
  salePrice       Float
  sku             String
  slug            String   @unique
  tags            String[]
  title           String
  wholesalePrice  Float

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId

  user     User   @relation(fields: [sellerId], references: [id])
  sellerId String @db.ObjectId

  SellerProfile   SellerProfile? @relation(fields: [sellerProfileId], references: [id])
  sellerProfileId String?        @db.ObjectId

  createdAt       DateTime       @default(now())
  updatedAt       DateTime?      @updatedAt
}

model Training {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  isActive    Boolean
  content     String
  imageUrl    String
  description String
  title       String
  slug        String  @unique

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  ADMIN
  USER
  SELLER
  MODERATOR
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  Products      Product[]

  role          UserRole       @default(USER)
  sellerProfile SellerProfile?

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model SellerProfile {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  code               String
  date               DateTime
  notes              String?
  terms              String?
  contactPersonPhone String?
  contactPerson      String?
  sellersPhysical    String?
  profileImageUrl    String?
  mainProduct        String
  email              String
  phone              String
  name               String
  products           Product[]

  isActive           Boolean
  storeSize          Float

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
